package apex.basepage;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

import apex.utils.ConfigManager;
import apex.utils.ThreadUtils;

public class BaseClass {
    protected WebDriver driver;
    
    @BeforeClass(alwaysRun = true)
    @Parameters({"browserName"})

    public void launchBrowser(@Optional("chrome") String browserName) {
        if (browserName.equals("chrome")) {
            driver = new ChromeDriver();
        } else if (browserName.equals("firefox")) {
            driver = new FirefoxDriver();
        }

        driver.manage().window().maximize();
//        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));

        String baseUrl = ConfigManager.getProperty("baseUrl");
        driver.get(baseUrl);
    }

    @AfterClass(alwaysRun = true)
    public void closeBrowser() {
        if (driver != null) {
            driver.quit();
        }
    }
    
    public static Logger log() {
        return ThreadUtils.getLogger();
      }
    
    
    public static WebDriver getDriver() {
      return ThreadUtils.getDriverRef();
    }
    
    public static WebElement getDynamicElement(WebElement e, String... var) {
        By by = null;
        Map<String, String> L = getLocatorSelector(e);
        String selector = L.get("selector");
        String value = String.format(L.get("value"), (Object[])var);
        switch (selector) {
          case "id":
            by = By.id(value);
            return getDriver().findElement(by);
          case "className":
            by = By.className(value);
            return getDriver().findElement(by);
          case "tagName":
            by = By.tagName(value);
            return getDriver().findElement(by);
          case "xpath":
            by = By.xpath(value);
            return getDriver().findElement(by);
          case "cssSelector":
            by = By.cssSelector(value);
            return getDriver().findElement(by);
          case "linkText":
            by = By.linkText(value);
            return getDriver().findElement(by);
          case "name":
            by = By.name(value);
            return getDriver().findElement(by);
          case "partialLinkText":
            by = By.partialLinkText(value);
            return getDriver().findElement(by);
        } 
        throw new IllegalStateException("locator : " + selector + " not found!!!");
      }
    
    private static Map<String, String> getLocatorSelector(WebElement e) {
        Map<String, String> locator = new HashMap<>();
        String[] pathVariables = null;
        String selector = null;
        String value = null;
        getDriver().manage().timeouts().implicitlyWait( Duration.ofSeconds(15));
        String str = e.toString();
        getDriver().manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
        if (str.contains("DefaultElementLocator")) {
          pathVariables = str.split("->")[1].trim().split(":", 2);
          selector = pathVariables[0].trim().split("[.]")[1];
          value = pathVariables[1].trim();
        } else {
          pathVariables = str.split("->")[1].trim().split(":", 2);
          selector = pathVariables[0].trim();
          value = pathVariables[1].trim().substring(0, pathVariables[1].trim().length() - 1);
        } 
        locator.put("string", str);
        locator.put("selector", selector);
        locator.put("value", value);
        return locator;
      }
    
    public static String getParameter(String key, String defaultValue) {
        String value = getParameter(key);
        return (value != null) ? value : defaultValue;
      }
      
    

    public static String getParameter(String key) {
      try {
        String value = System.getProperty(key);
        String defValue = ThreadUtils.getITestContext().getCurrentXmlTest().getParameter(key);
        return StringUtils.isBlank(value) ? defValue : value;
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } 
    }
      
}

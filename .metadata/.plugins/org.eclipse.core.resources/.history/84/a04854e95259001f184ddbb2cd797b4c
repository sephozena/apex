package apex.basepage;

import java.time.Duration;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

import apex.utils.ConfigManager;
import apex.utils.ThreadUtils;

public class BaseClass {
    protected WebDriver driver;
    protected static final Logger logger = LogManager.getLogger(BaseClass.class);
    public Logger log() {
        return logger;
    }

    
    
    private WebDriver initializeDriver(String browserName) {
        if ("chrome".equals(browserName)) {
            return new ChromeDriver();
        } else if ("firefox".equals(browserName)) {
            return new FirefoxDriver();
        }
        throw new IllegalArgumentException("Invalid browser name: " + browserName);
    }
    @BeforeClass(alwaysRun = true)
    @Parameters({"browserName"})
    public void launchBrowser(@Optional("chrome") String browserName) {
        driver = initializeDriver(browserName);
        driver.manage().window().maximize();
        driver.get(ConfigManager.getProperty("baseUrl"));
        ThreadUtils.setLoggerRef(logger);
        
    

//    public void launchBrowser(@Optional("chrome") String browserName) {
//        if (browserName.equals("chrome")) {
//            driver = new ChromeDriver();
//        } else if (browserName.equals("firefox")) {
//            driver = new FirefoxDriver();
//        }

        driver.manage().window().maximize();
//        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));

        String baseUrl = ConfigManager.getProperty("baseUrl");
        driver.get(baseUrl);
    }

    @AfterClass(alwaysRun = true)
    public void closeBrowser() {
        if (driver != null) {
            driver.quit();
        }
    }
    

}
